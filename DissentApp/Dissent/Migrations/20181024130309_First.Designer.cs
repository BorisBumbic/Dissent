// <auto-generated />
using System;
using Dissent.wwwroot.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Dissent.Migrations
{
    [DbContext(typeof(TwitterDbcontext))]
    [Migration("20181024130309_First")]
    partial class First
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Dissent.Models.Query", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("SearchQuery");

                    b.HasKey("Id");

                    b.ToTable("Query");
                });

            modelBuilder.Entity("Dissent.Models.TweetsWithSentiment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Language");

                    b.Property<int?>("SearchQueryId");

                    b.Property<float>("Sentiment");

                    b.Property<string>("Text");

                    b.Property<string>("TweetId");

                    b.HasKey("Id");

                    b.HasIndex("SearchQueryId");

                    b.ToTable("TweetsWithSentiment");
                });

            modelBuilder.Entity("Dissent.Models.TweetsWithSentiment", b =>
                {
                    b.HasOne("Dissent.Models.Query", "SearchQuery")
                        .WithMany("SearchResults")
                        .HasForeignKey("SearchQueryId");
                });
#pragma warning restore 612, 618
        }
    }
}
